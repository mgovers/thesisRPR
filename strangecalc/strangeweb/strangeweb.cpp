/*
 * strangeweb.cpp
 *
 * Executable to produce calculations for a specific strangecalc model.
 * Run it without arguments to learn about the syntax.
 *
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * Do not alter this file. It is automatically generated by autotools from
 * strangeweb.cpp.in
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 *
 * Author: Pieter Vancraeyveld (pieter.vancraeyveld@ugent.be)
 *
 * Work started on: September,8 2009
 *
 */

#define OUTPUTWIDTH 102


#include <TKinematics.h>
#include <TCalcInfo.h>
#include <TStrangeModel.h>
#include <cstring>
#include <cstdlib>
#include <iomanip>
#include <string>
#include <ctime>
#include <algorithm>
#include <fstream>
#include <iostream>
using std::ostream;
using std::cout; 
using std::cerr; 
using std::endl;
using std::setw;
using std::setprecision;
using std::string;
using std::ofstream;
using std::atoi;
using std::atof;
using std::strcmp;
using std::strncmp;
using std::strcpy;
using std::replace;
using std::fixed;
using std::scientific;

//__________________________________________________________________________________________
void centerprint(ostream& stream, const char* s)
{
  int padding = OUTPUTWIDTH - ((string)s).length();
  padding = padding/2 + padding%2;

  for(; padding>0; --padding) stream << " ";

  stream << s << endl;
}

//__________________________________________________________________________________________
void printusage(ostream& stream)
{
  stream << "strangeweb -- A front-end for strangecalc to perform calculations " << endl
	 << "              for a specific strangecalc model on the command line" << endl
	 << "              without interactivity." 
	 << endl << endl
	 << "synopsis: strangeweb -output file-  (file where the results will end up)" << endl
	 << "                     -model name-   (description of the model)" << endl
	 << "                     -Regge-model-  (fit_specification file to" << endl
	 << "                                     initizalize the Regge model)" << endl
	 << "                     -RPR-model-    (fit_specification file to" << endl
	 << "                                     initizalize the RPR model)" << endl
	 << "                     -isospin-      (specifies the final state [1-6,11,12])" << endl
	 << "                     -observable-   (specifies the observable to calculate. See" << endl
	 << "                                     TCalcInfo::SetObservable for more info.)" << endl
	 << "                     -description-  (describes the observable)" << endl
	 << "                     -Q^2 low-      (Range for Q^2 in GeV^2)" << endl
	 << "                     -Q^2 high-" << endl
	 << "                     -Q^2 steps-    (Number of steps in Q^2 [integer])" << endl
	 << "                     -Energy-       (Specifies the energy observable." << endl
	 << "                                     See TKinematics::SetFormat for more info.)" << endl
	 << "                     -Energy low-   (Range for energy variable in MeV)" << endl
	 << "                     -Energy high-" << endl
	 << "                     -Energy steps- (Number of steps in Energy [integer])" << endl
	 << "                     -Angle-        (Specifies the angular variable." << endl
	 << "                                     See TKinematics::SetFormat for more info." << endl
	 << "                     -Angle low-    (Range for angular variable)" << endl
	 << "                     -Angle high-" << endl
	 << "                     -Angle steps-  (Number of steps in Angle [integer])" << endl
	 << endl << endl
	 << "Exit codes:" << endl
	 << "    0: all went well" << endl
	 << "    1: something went wrong inside strangecalc" << endl
	 << " 201: command line usage error" << endl
	 << " 202: can't create output file" << endl
	 << " 203: requested an illegal observable" << endl
	 << " 204: invalid isospin channel" << endl;
}

//__________________________________________________________________________________________
int main(int argc, char *argv[])
{
  //
  // Check the number of arguments
  //______________________________  
  if( argc!=19 ) {
    printusage(cerr);
    exit(201);
  }

  //
  // Open the output stream
  //_______________________
  ofstream output(argv[1]);
  if( !output.good() ) {
    cerr << "Something went wrong opening the output file." << endl;
    exit(202);
  }

  //
  // Print a pretty header
  //______________________
  output << endl;
  centerprint(output," ______  ______ ______                     _       _  ");
  centerprint(output,"(_____ \\(_____ (_____ \\                   | |     | | ");
  centerprint(output," _____) )_____) )____) )   ____   ___   __| |_____| | ");
  centerprint(output,"|  __  /|  ____/  __  /   |    \\ / _ \\ / _  | ___ | | ");
  centerprint(output,"| |  \\ \\| |    | |  \\ \\   | | | | |_| ( (_| | ____| | ");
  centerprint(output,"|_|   |_|_|    |_|   |_|  |_|_|_|\\___/ \\____|_____)\\_)");
  
  output << endl;
  centerprint(output,"Developed and maintained by");
  centerprint(output,"T. Corthals, L. De Cruz, J. Ryckebusch, T. Van Cauteren, P. Vancraeyveld and T. Vrancx");
  centerprint(output,"Department of Physics and Astronomy, Ghent University");
  centerprint(output,"http://rprmodel.ugent.be");
  output << endl;
  centerprint(output,"***");
  output << endl;

  //
  // Initialize the strangecalc model
  //_________________________________
  char model[100];
  strcpy(model,argv[2]);
  TStrangeModel reggemodel;
  reggemodel.SetStrangeModel(argv[3]);
  TStrangeModel rprmodel;
  rprmodel.SetStrangeModel(argv[4]);

  //
  // Initialize the observable
  //__________________________
  int isospin = atoi(argv[5]);
  char observable[200], description[200], isoDescription[50];
  strcpy(observable,argv[6]);
  strcpy(description,argv[7]);
  TCalcInfo::EReaction reaction = TCalcInfo::kPhoto;
  
  // Check the isospin channels
  switch( isospin ) {
  case 1:
    strcpy(isoDescription,"g p -> K^+ Lambda");
    break;
  case 2:
    strcpy(isoDescription,"g p -> K^+ Sigma^0");
    break;
  case 3:
    strcpy(isoDescription,"g p -> K^0 Sigma^+");
    break;
  case 4:
    strcpy(isoDescription,"g n -> K^0 Lambda");
    break;
  case 5:
    strcpy(isoDescription,"g n -> K^0 Sigma^0");
    break;
  case 6:
    strcpy(isoDescription,"g n -> K^+ Sigma^-");
    break;
  case 11:
    strcpy(isoDescription,"K^- p -> g Lambda");
    reaction = TCalcInfo::kCapture;
    break;
  case 12:
    strcpy(isoDescription,"K^- p -> g Sigma^0");
    reaction = TCalcInfo::kCapture;
    break;
  default:
    cerr << "Invalid isospin channel." << endl;
    exit(204);
  }

  // Some observables are forbidden
  if( !strcmp(observable,"b1^2") || 
      !strcmp(observable,"b2^2") || 
      !strcmp(observable,"b3^2") || 
      !strcmp(observable,"b4^2") ||
      !strcmp(observable,"diff_t+l") ) {
    cerr << observable << " is a valid observable in TCalcInfo, but we don't allow it in strangeweb."
	 << endl;;
    exit(203);
  }
  // Is it a electroproduction observable?
  else if( !strncmp(observable,"diff_",5) ||
	   !strncmp(observable,"induced_",8) ||
	   !strncmp(observable,"transf_",7) ) {
    reaction = TCalcInfo::kElectro;

    if( isospin==11 || isospin==12 ) {
      cerr << observable << "isn't compatible with isospin channel " << isospin << endl;
      exit(203);
    }
  }

  TCalcInfo calcInfo(reaction,isospin,observable);

  //
  // Initialize the kinematics
  //__________________________
  // Store the ranges for the kinematical variables
  double q2low = atof(argv[8]);
  double q2high = atof(argv[9]);
  double elow = atof(argv[12]);
  double ehigh = atof(argv[13]);
  double alow = atof(argv[16]);
  double ahigh = atof(argv[17]);

  // Build the format string
  char formatString[100];
  sprintf(formatString,"qsquared:%s:%s",argv[11],argv[15]);  

  // Define the kinematics
  TKinematics kinematics("kinematics","strangeweb kinematics",isospin,
			 formatString,q2low*1.e6,elow,alow);
  
  // Set ranges for the independent variables
  int steps = atoi(argv[10]);
  if( steps>1 ) kinematics.SetVarRange(1,q2low*1.e6,q2high*1.e6,steps);
  
  steps = atoi(argv[14]);
  if( steps>1 ) kinematics.SetVarRange(2,elow,ehigh,steps);

  steps = atoi(argv[18]);
  if( steps>1 ) kinematics.SetVarRange(3,alow,ahigh,steps);

  //
  // Do the calculations
  //____________________
  double *q2 = kinematics.GetVarArray("qsquared");
  double *w = kinematics.GetVarArray("w");
  double *wlab = kinematics.GetVarArray("wlab");
  double *cos = kinematics.GetVarArray("costhkcm");
  double *t = kinematics.GetVarArray("-t");
  double *pk = kinematics.GetVarArray("pklab");
  
  double *reggecalc = reggemodel.GetCalcpoints(kinematics,&calcInfo);
  double *rprcalc = rprmodel.GetCalcpoints(kinematics,&calcInfo);

  //
  // Print table header
  //___________________
  output << setw(11) << "Q^2 (GeV^2)"
	 << setw(10) << "W (MeV)"
	 << setw(12) << "E_g (MeV)"
	 << setw(14) << "|p_K| (MeV)"
	 << setw(13) << "-t (GeV^2)"
	 << setw(12) << "cos(th_K)"
	 << setw(15) << "Regge"
	 << setw(15) << "RPR"
	 << endl << endl;

  //
  // Print table with results
  //_________________________
  for(int i=0; i<kinematics.GetNumberOfSteps(); ++i) {
    kinematics.GoTo(i);
    if( !kinematics.IsPhysical() ) continue;
    
    output << fixed << setprecision(4)
	   << setw(11) << q2[i]/1.e6
	   << setprecision(2)
	   << setw(10) << w[i]
	   << setw(12) << wlab[i]
	   << setw(14) << pk[i]
	   << scientific << setprecision(4)
	   << setw(13) << t[i]/1.e6
	   << fixed << setprecision(4) 
	   << setw(12) << cos[i]
	   << scientific << setprecision(6)
	   << setw(15) << reggecalc[i]
	   << setw(15) << rprcalc[i]
	   << endl;

  }

  //
  // Print info about columns
  //_________________________
  output << endl
	 << "Information:" << endl
	 << "\tModel\t\t" << model << endl
	 << "\tReaction\t" << isoDescription << endl << endl
	 << "\tQ^2\t\t" << "Photon virtuality in MeV" << endl
	 << "\tW\t\t"<< "Invariant mass in MeV" << endl
	 << "\tE_g\t\t"<< "Photon LAB energy in MeV" << endl
	 << "\t|p_K|\t\t"<< "Kaon LAB momentum in MeV" << endl
	 << "\t-t\t\t"<< "Momentum transfer in GeV^2" << endl
	 << "\tcos(th_K)\t"<< "Kaon CM scattering angle" << endl
	 << "\tRegge\t\t"<< "Regge model calculation for " << description << endl
	 << "\tRPR\t\t"<< "RPR model calculation for " << description << endl << endl;

  //
  // Print a pretty footer
  //______________________
  time_t currenttime;
  time(&currenttime);
  char printtime[100];
  strftime(printtime,100,
	   "%c (%Z) ",localtime(&currenttime));

  output << endl << endl;
  for(int i=0; i<OUTPUTWIDTH; ++i) output.put('_');
  output << endl
	 << "This file was generated on " 
	 << printtime
	 << "with strangecalc version " <<  fixed << setprecision (1) << 10.3
	 << " (r" << "2783M" << ")" << endl;

  //
  // Clean up
  //_________
  output.close();
  delete[] q2;
  delete[] w;
  delete[] wlab;
  delete[] cos;
  delete[] t;
  delete[] pk;
  delete[] reggecalc;
  delete[] rprcalc;

  return 0;
}
